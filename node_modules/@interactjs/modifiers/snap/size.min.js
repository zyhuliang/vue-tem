import{makeModifier as t}from"../base.min.js";import{snap as s}from"./pointer.min.js";import e from"../../utils/extend.min.js";import*as o from"../../utils/is.min.js";const n={start(t){const{state:e,edges:o}=t,{options:n}=e;if(!o)return null;t.state={options:{targets:null,relativePoints:[{x:o.left?0:1,y:o.top?0:1}],offset:n.offset||"self",origin:{x:0,y:0},range:n.range}},e.targetFields=e.targetFields||[["width","height"],["x","y"]],s.start(t),e.offsets=t.state.offsets,t.state=e},set(t){const{interaction:n,state:i,coords:r}=t,{options:f,offsets:a}=i,l={x:r.x-a[0].x,y:r.y-a[0].y};i.options=e({},f),i.options.targets=[];for(const t of f.targets||[]){let s;if(s=o.func(t)?t(l.x,l.y,n):t,s){for(const[t,e]of i.targetFields)if(t in s||e in s){s.x=s[t],s.y=s[e];break}i.options.targets.push(s)}}const p=s.set(t);return i.options=f,p},defaults:{range:1/0,targets:null,offset:null,endOnly:!1,enabled:!1}};export default t(n,"snapSize");export{n as snapSize};
//# sourceMappingURL=size.min.js.map